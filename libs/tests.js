QUnit.module("For Loop Exercises",function(){test("Create looper() function",function(){ok("undefined"!=typeof looper,"looper() is properly created."),equal(looper.length,0,"looper() should have 0 parameters.");var e=Dexter.fake(window,"run");looper(),equal(e.called,5,"run() should be called 5 times in looper()"),e.restore(),expect(3)}),test("Create inception() function",function(){ok("undefined"!=typeof inception,"inception() is properly created."),equal(inception.length,1,"inception() should have 1 parameter.");var e=Dexter.fake(window,"run");inception(2),equal(e.called,2,"inception(2) -> run() is called twice"),e.restore();var r=Dexter.fake(window,"run");inception(3),equal(r.called,3,"inception(3) -> run() is called thrice"),r.restore();var a=Dexter.fake(window,"run");inception(4),equal(a.called,4,"inception(4) -> run() is called four times"),a.restore();var t=Dexter.fake(window,"run");inception(0),equal(t.called,0,"inception(0) -> run() should not be called"),t.restore(),expect(6)}),test("Create redLightGreenLight() function",function(){ok("undefined"!=typeof redLightGreenLight,"redLightGreenLight() is properly created."),equal(redLightGreenLight.length,2,"redLightGreenLight() should have 2 parameters.");var e=Dexter.fake(window,"run");redLightGreenLight(2,!0),equal(e.called,2,"redLightGreenLight(2, true) -> run() is called twice"),e.restore();var r=Dexter.fake(window,"stop");redLightGreenLight(3,!1),equal(r.called,3,"redLightGreenLight(3, false) -> stop() is called thrice"),r.restore();var a=Dexter.fake(window,"run");redLightGreenLight(4,!0),equal(a.called,4,"redLightGreenLight(4, true) -> run() is called four times"),a.restore();var t=Dexter.fake(window,"run");redLightGreenLight(0,!1),equal(t.called,0,"redLightGreenLight(0, false) -> stop() should not be called"),t.restore(),expect(6)}),test("Create range() function",function(){ok("undefined"!=typeof range,"range() is properly created."),equal(range.length,2,"range() should have 2 parameters.");var e=Dexter.fake(window,"run");range(0,2),equal(e.called,2,"range(0, 2) -> run() is called twice"),e.restore();var r=Dexter.fake(window,"run");range(1,2),equal(r.called,1,"range(1, 2) -> run() is called once"),r.restore();var a=Dexter.fake(window,"run");range(3,6),equal(a.called,3,"range(3, 6) -> run() is called thrice"),a.restore();var t=Dexter.fake(window,"run");range(2,0),equal(t.called,0,"range(2, 0) -> run() should not be called"),t.restore(),expect(6)}),test("Create rangeAdv() function",function(){ok("undefined"!=typeof rangeAdv,"rangeAdv() is properly created."),equal(rangeAdv.length,3,"rangeAdv() should have 3 parameters.");var e=Dexter.fake(window,"run");rangeAdv(0,2,1),equal(e.called,2,"rangeAdv(0, 2, 1) -> run() is called twice"),e.restore();var r=Dexter.fake(window,"run");rangeAdv(0,4,2),equal(r.called,2,"rangeAdv(0, 4, 2) -> run() is called twice"),r.restore();var a=Dexter.fake(window,"run");rangeAdv(1,5,3),equal(a.called,2,"rangeAdv(1, 5, 3) -> run() is called twice"),a.restore();var t=Dexter.fake(window,"run");rangeAdv(2,0,5),equal(t.called,0,"rangeAdv(2, 0, 5) -> run() should not be called"),t.restore();var n=Dexter.fake(window,"run");rangeAdv(0,2,5),equal(n.called,1,"rangeAdv(0, 2, 5) -> run() is called once"),n.restore(),expect(7)})}),QUnit.module("Array Exercises",function(){test("Create quadArray() function",function(){ok("undefined"!=typeof quadArray,"quadArray() is properly created."),equal(quadArray.length,0,"quadArray() should have 0 parameters.");var e=quadArray();ok(Array.isArray(e),"An array should be returned"),equal(e.length,4,"quadArray() should have 4 items"),expect(4)}),test("Create itemCount() function",function(){ok("undefined"!=typeof itemCount,"itemCount() is properly created."),equal(itemCount.length,1,"itemCount() should have 1 parameter."),equal(itemCount([1,2,3]),3,"itemCount([1, 2, 3]) -> 3"),equal(itemCount(["hello","hola","bonjour","ni hao"]),4,'itemCount(["hello", "hola", "bonjour", "ni hao"]) -> 4'),expect(4)}),test("Create firstItem() function",function(){ok("undefined"!=typeof firstItem,"firstItem() is properly created."),equal(firstItem.length,1,"firstItem() should have 1 parameter."),equal(firstItem([1,2,3]),1,"firstItem([1, 2, 3]) -> 1"),equal(firstItem(["hello","hola","bonjour","ni hao"]),"hello",'firstItem(["hello", "hola", "bonjour", "ni hao"]) -> "hello"'),expect(4)}),test("Create lastItem() function",function(){ok("undefined"!=typeof lastItem,"lastItem() is properly created."),equal(lastItem.length,1,"lastItem() should have 1 parameter."),equal(lastItem([1,2,3]),3,"lastItem([1, 2, 3]) -> 3"),equal(lastItem(["hello","hola","bonjour","ni hao"]),"ni hao",'lastItem(["hello", "hola", "bonjour", "ni hao"]) -> "ni hao"'),expect(4)}),test("Create arrayEdge() function",function(){ok("undefined"!=typeof arrayEdge,"arrayEdge() is properly created."),equal(arrayEdge.length,1,"arrayEdge() should have 1 parameter."),deepEqual(arrayEdge([1,2,3]),[1,3],"arrayEdge([1, 2, 3]) -> [1, 3]"),deepEqual(arrayEdge(["hello","hola","bonjour","ni hao"]),["hello","ni hao"],'arrayEdge(["hello", "hola", "bonjour", "ni hao"]) -> ["hello", "ni hao"]'),expect(4)}),test("Create processArray() function",function(){ok("undefined"!=typeof processArray,"processArray() is properly created."),equal(processArray.length,1,"processArray() should have 1 parameter.");var e=Dexter.fake(window,"process"),r=1;e.callback=function(e){return equal(e,r,"process("+r+") call expected"),r++,e},processArray([1,2,3]),equal(e.called,3,"processArray([1, 2, 3]) -> process() is called thrice"),e.restore();var a=Dexter.fake(window,"process"),t=["hello","hola","bonjour","ni hao"],n=0;a.callback=function(e){return equal(e,t[n],'process("'+t[n]+'") call expected'),n++,e},processArray(["hello","hola","bonjour","ni hao"]),equal(a.called,4,'processArray(["hello", "hola", "bonjour", "ni hao"]) -> process() is called four times'),a.restore(),expect(11)}),test("Create filterArray() function",function(){ok("undefined"!=typeof filterArray,"filterArray() is properly created."),equal(filterArray.length,2,"filterArray() should have 2 parameters."),deepEqual(filterArray([1,2,3],2),[2,3],"filterArray([1, 2, 3], 2) -> [2, 3]"),deepEqual(filterArray([7,3,10,6],5),[7,10,6],"filterArray([7, 3, 10, 6], 5) -> [7, 10, 6]"),deepEqual(filterArray([7,3,10,6],20),[],"filterArray([7, 3, 10, 6], 20) -> []"),expect(5)})});
